%lex

%%

\/\/.*  /* skip comment */

\/\*(.|\s)*\*\/ /* skip comment */


\s+     /* skip white space */

\d+     return 'NUMBER'

[+\-]   return 'ADDITIVE_OPERATOR'
[*/]   return 'MULTIPLICATIVE_OPERATOR'


/lex


// Module inclue

%{

// code included "as is"

function BinaryExpression(left, op, right){ 
    return {
        type: 'BinaryExpression',
        op,
        left,
        right
    };
}

%}



// Syntactic grammar

%%

Program
    : StatementList
        {
            $$ = {
                type: 'Program',
                body: $1
            }
        }
    ;

StatementList
    : Statement
        {
            $$ = [$1]
        }
    | StatementList Statement
        {
          $1.push($2); $$ = $1
        }
    ;

Statement
    : ExpressionStatement
    | EmptyStatement
    | BlockStatement
    ;

BlockStatement
    : '{' OptStatementList '}'
        {
            $$ = {
                type: 'BlockStatement',
                statements: $2
            }
        }
    ;

OptStatementList
    : StatementList
    | /* empty */
        {
            $$ = []
        }
    ;

ExpressionStatement
    : Expression ';'
        { 
            $$ = {
                type: 'ExpressionStatement',
                expression: $1
            }
        }
    ;

EmptyStatement
    : ';'
        { 
            $$ = {
                type: 'EmptyStatement',
            }
        }
    ;

Expression
    : AdditiveExpression
    ;

AdditiveExpression
    : AdditiveExpression ADDITIVE_OPERATOR MultiplicativeExpression 
        { 
            $$ = BinaryExpression($1, $2, $3)
        }
    | MultiplicativeExpression
    ;

MultiplicativeExpression
    : MultiplicativeExpression MULTIPLICATIVE_OPERATOR PrimaryExpression
        { 
            $$ = BinaryExpression($1, $2, $3)
        }
    | PrimaryExpression
    ;

PrimaryExpression
    : Literal
    | ParenthesizedExpression
    ;

Literal
    : NumericLiteral
    ;

NumericLiteral
    : NUMBER 
        { 
            $$ = {
                type: 'NumericLiteral',
                value: Number($1)
            }
        }
    ;

ParenthesizedExpression
    : '(' Expression ')' { $$ = $2 }
    ;
