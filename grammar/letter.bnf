%lex

%%

\/\/.*  /* skip comment */

\/\*(.|\s)*\*\/ /* skip comment */


\s+     /* skip white space */

// keywords

\bdef\b     return 'DEF'
\breturn\b  return 'RETURN'
\bif\b      return 'IF'
\belse\b    return 'ELSE'
\blet\b     return 'LET'


\btrue\b      return 'TRUE'
\bfalse\b      return 'FALSE'
\bnull\b      return 'NULL'

\d+     return 'NUMBER'
\w+     return 'IDENTIFIER'


\|\|    return 'LOGICAL_OR'
\&\&    return 'LOGICAL_AND'

[\=!]\= return 'EQUALITY_OPERATOR'
[><]\=? return 'RELATIONAL_OPERATOR'

\=       return 'SIMPLE_ASSIGN'
[*/\+\-]\=     return  'COMPLEX_ASSIGN'


[+\-]   return 'ADDITIVE_OPERATOR'
[*/]   return 'MULTIPLICATIVE_OPERATOR'


/lex


// Module inclue

%{

// code included "as is"

function BinaryExpression(left, operator, right){ 
    return {
        type: 'BinaryExpression',
        operator,
        left,
        right
    };
}


function Literal(namePrefix, value) {
    return {
        type: `${namePrefix}Literal`,
        value
    }
}

function IfStatement(test, consequent,alternate) {
    return {
        type: 'IfState',
        test,
        consequent,
        alternate
    }
}

function LogicalExpression(left, operator, right){ 
    return {
        type: 'LogicalExpression',
        operator,
        left,
        right
    };
}

%}


%nonassoc THEN
%nonassoc ELSE


// Syntactic grammar

%%

Program
    : StatementList
        {
            $$ = {
                type: 'Program',
                body: $1
            }
        }
    ;

StatementList
    : Statement
        {
            $$ = [$1]
        }
    | StatementList Statement
        {
          $1.push($2); $$ = $1
        }
    ;

Statement
    : ExpressionStatement
    | EmptyStatement
    | BlockStatement
    | FunctionDeclaration
    | ReturnStatement
    | IfStatement
    | VariableStatement
    ;


VariableStatement
    : LET VariableDeclarationList ';'
        {
            $$ = {
                type: 'VariableStatement',
                declarations: $2
            }
        }
    ;


VariableDeclarationList
    : VariableDeclaration
        { $$ = [$1] }
    | VariableDeclarationList ',' VariableDeclaration
        {
            $1.push($3); $$ = $1
        }
    ;

VariableDeclaration
    : Identifier OptVariableInitializer
        { 
            $$ = {
                tye: 'VariableDeclaration',
                id: $1,
                init: $2
            }
        }
    ;


OptVariableInitializer
    : VariableInitializer
    | /* empty */
         { $$ = null }
    ;

VariableInitializer
    : SIMPLE_ASSIGN AssignmentExpression
        { $$ = $2}
    ;

IfStatement
    : IF '(' Expression ')' Statement %prec THEN
        { $$ = IfStatement($3, $5) }
    | IF '(' Expression ')' Statement ELSE Statement
         { $$ = IfStatement($3, $5, $7) }
    ;

FunctionDeclaration
    : DEF Identifier '(' OptFormalParameterList ')' BlockStatement
        {
            $$ = {
                type: 'FunctionDeclaration',
                name: $2,
                params: $4,
                body: $6
            }
        }
    ;

Identifier
    : IDENTIFIER
        {
            $$ = {
                type: 'Identifier',
                value: $1
            }
        }
    ;

OptFormalParameterList
    : FormalParameterList
    | /* empty */
        {
            $$ = []
        }
    ;

FormalParameterList
    : Identifier
        { 
            $$ = [$1]
        }
    | FormalParameterList ',' Identifier
        {
           $1.push($3); $$ = $1 
        }
    ;

ReturnStatement
    : RETURN OptExpression ';'
        {
            $$ = {
                type: 'ReturnStatement',
                argument: $2
            }
        }
    ;

OptExpression
    : Expression
    | /* empty */
        {
            $$ = null
        }
    ;

BlockStatement
    : '{' OptStatementList '}'
        {
            $$ = {
                type: 'BlockStatement',
                statements: $2
            }
        }
    ;

OptStatementList
    : StatementList
    | /* empty */
        {
            $$ = []
        }
    ;

ExpressionStatement
    : Expression ';'
        { 
            $$ = {
                type: 'ExpressionStatement',
                expression: $1
            }
        }
    ;

EmptyStatement
    : ';'
        { 
            $$ = {
                type: 'EmptyStatement',
            }
        }
    ;


LeftHandSideExpression
    : Identifier
    ;

AssignmentOperator
    : SIMPLE_ASSIGN
    | COMPLEX_ASSIGN
    ;

Expression
    : AssignmentExpression
    ;

AssignmentExpression
    : LogicalORExpression
    | LeftHandSideExpression AssignmentOperator AssignmentExpression
        {
            $$ = {
                type: 'AssignmentExpression',
                left: $1,
                operator: $2,
                right: $3
            }
        }
    ;

LogicalORExpression
    : LogicalANDExpression
    | LogicalORExpression LOGICAL_OR LogicalANDExpression
        { $$ = LogicalExpression($1, $2, $3) }
    ;

LogicalANDExpression
    : EqualityExpression
    | LogicalANDExpression LOGICAL_AND EqualityExpression
        { $$ = LogicalExpression($1, $2, $3) }
    ;

EqualityExpression
    : RelationalExpression
    | EqualityExpression EQUALITY_OPERATOR RelationalExpression
        {
            $$ = BinaryExpression($1, $2, $3)
        }
    ;

RelationalExpression
    : AdditiveExpression
    | RelationalExpression RELATIONAL_OPERATOR AdditiveExpression
        {
            $$ = BinaryExpression($1, $2, $3)
        }
    ;

AdditiveExpression
    : AdditiveExpression ADDITIVE_OPERATOR MultiplicativeExpression 
        { 
            $$ = BinaryExpression($1, $2, $3)
        }
    | MultiplicativeExpression
    ;

MultiplicativeExpression
    : MultiplicativeExpression MULTIPLICATIVE_OPERATOR PrimaryExpression
        { 
            $$ = BinaryExpression($1, $2, $3)
        }
    | PrimaryExpression
    ;

PrimaryExpression
    : Literal
    | Identifier
    | ParenthesizedExpression
    ;

Literal
    : NumericLiteral
    | TrueLiteral
    | FalseLiteral
    | NullLiteral
    ;

TrueLiteral
    : TRUE { $$ = Literal('Boolean', true) }
    ;

FalseLiteral
    : FALSE { $$ = Literal('Boolean', false) }
    ;

NullLiteral
    : NULL { $$ = Literal('Null', null) }
    ;

NumericLiteral
    : NUMBER { $$ = Literal('Numeric', Number($1)) }
    ;

ParenthesizedExpression
    : '(' Expression ')' { $$ = $2 }
    ;
