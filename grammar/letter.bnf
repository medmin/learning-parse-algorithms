%lex

%%

\s+     /* skip white space */

\d+     return 'NUMBER'

[+\-]   return 'ADDITIVE_OPERATOR'
[*/]   return 'MULTIPLICATIVE_OPERATOR'


/lex


// Module inclue

%{

// code included "as is"

function BinaryExpression(left, op, right){ 
    return {
        type: 'BinaryExpression',
        op,
        left,
        right
    };
}

%}



// Syntactic grammar

%%

Expression
    : AdditiveExpression
    ;

AdditiveExpression
    : AdditiveExpression ADDITIVE_OPERATOR MultiplicativeExpression 
        { 
            $$ = BinaryExpression($1, $2, $3)
        }
    | MultiplicativeExpression
    ;

MultiplicativeExpression
    : MultiplicativeExpression MULTIPLICATIVE_OPERATOR PrimaryExpression
        { 
            $$ = BinaryExpression($1, $2, $3)
        }
    | PrimaryExpression
    ;

PrimaryExpression
    : Literal
    | ParenthesizedExpression
    ;

Literal
    : NumericLiteral
    ;

NumericLiteral
    : NUMBER 
        { 
            $$ = {
                type: 'NumericLiteral',
                value: Number($1)
            }
        }
    ;

ParenthesizedExpression
    : '(' Expression ')' { $$ = $2 }
    ;
