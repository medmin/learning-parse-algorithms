/**
 * LR parser generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/path-to-output-parser-file.js
 */

'use strict';

/**
 * Matched token text.
 */
let yytext;

/**
 * Length of the matched token text.
 */
let yyleng;

/**
 * Storage object.
 */
let yy = {};

/**
 * Result of semantic action.
 */
let __;

/**
 * Result location object.
 */
let __loc;

function yyloc(start, end) {
  if (!yy.options.captureLocations) {
    return null;
  }

  // Epsilon doesn't produce location.
  if (!start || !end) {
    return start || end;
  }

  return {
    startOffset: start.startOffset,
    endOffset: end.endOffset,
    startLine: start.startLine,
    endLine: end.endLine,
    startColumn: start.startColumn,
    endColumn: end.endColumn,
  };
}

const EOF = '$';

/**
 * List of productions (generated by Syntax tool).
 */
const productions = [[-1,1,(_1) => { __ = _1 }],
[0,1,(_1) => { 
            __ = {
                type: 'Program',
                body: _1
            }
         }],
[1,1,(_1) => { 
            __ = [_1]
         }],
[1,2,(_1,_2) => { 
          _1.push(_2); __ = _1
         }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[2,1,(_1) => { __ = _1 }],
[3,4,(_1,_2,_3,_4) => { 
            __ = {
                type: 'ClassDeclaration',
                id: _2,
                superClass: _3,
                body: _4
            }
         }],
[4,1,(_1) => { __ = _1 }],
[4,0,() => {  __ = null  }],
[5,2,(_1,_2) => {  __ = _2  }],
[6,1,(_1) => { __ = _1 }],
[6,1,(_1) => { __ = _1 }],
[7,7,(_1,_2,_3,_4,_5,_6,_7) => { 
            __ = {
                type: 'DoWhileStatement',
                test: _5,
                body: _2
            }
         }],
[8,5,(_1,_2,_3,_4,_5) => { 
            __ = {
                type: 'WhileStatement',
                test: _3,
                body: _5
            }
         }],
[9,3,(_1,_2,_3) => { 
            __ = {
                type: 'VariableStatement',
                declarations: _2
            }
         }],
[10,1,(_1) => {  __ = [_1]  }],
[10,3,(_1,_2,_3) => { 
            _1.push(_3); __ = _1
         }],
[11,2,(_1,_2) => {  
            __ = {
                tye: 'VariableDeclaration',
                id: _1,
                init: _2
            }
         }],
[12,1,(_1) => { __ = _1 }],
[12,0,() => {  __ = null  }],
[13,2,(_1,_2) => {  __ = _2 }],
[14,5,(_1,_2,_3,_4,_5) => {  __ = IfStatement(_3, _5)  }],
[14,7,(_1,_2,_3,_4,_5,_6,_7) => {  __ = IfStatement(_3, _5, _7)  }],
[15,6,(_1,_2,_3,_4,_5,_6) => { 
            __ = {
                type: 'FunctionDeclaration',
                name: _2,
                params: _4,
                body: _6
            }
         }],
[16,1,(_1) => { 
            __ = {
                type: 'Identifier',
                value: _1
            }
         }],
[17,1,(_1) => { __ = _1 }],
[17,0,() => { 
            __ = []
         }],
[18,1,(_1) => {  
            __ = [_1]
         }],
[18,3,(_1,_2,_3) => { 
           _1.push(_3); __ = _1 
         }],
[19,3,(_1,_2,_3) => { 
            __ = {
                type: 'ReturnStatement',
                argument: _2
            }
         }],
[20,1,(_1) => { __ = _1 }],
[20,0,() => { 
            __ = null
         }],
[21,3,(_1,_2,_3) => { 
            __ = {
                type: 'BlockStatement',
                statements: _2
            }
         }],
[22,1,(_1) => { __ = _1 }],
[22,0,() => { 
            __ = []
         }],
[23,2,(_1,_2) => {  
            __ = {
                type: 'ExpressionStatement',
                expression: _1
            }
         }],
[24,1,(_1) => {  
            __ = {
                type: 'EmptyStatement',
            }
         }],
[25,1,(_1) => { __ = _1 }],
[26,1,(_1) => { __ = _1 }],
[26,1,(_1) => { __ = _1 }],
[26,3,(_1,_2,_3) => { 
            __ = MemberExpression(_1, _3)
         }],
[26,4,(_1,_2,_3,_4) => { 
            __ = MemberExpression(_1, _3)
         }],
[27,1,(_1) => { 
            __ = {
                type: 'ThisExpression'
            }
         }],
[28,1,(_1) => { __ = _1 }],
[28,1,(_1) => { __ = _1 }],
[29,1,(_1) => { __ = _1 }],
[30,1,(_1) => { __ = _1 }],
[30,3,(_1,_2,_3) => { 
            __ = {
                type: 'AssignmentExpression',
                left: _1,
                operator: _2,
                right: _3
            }
         }],
[31,1,(_1) => { __ = _1 }],
[31,3,(_1,_2,_3) => {  __ = LogicalExpression(_1, _2, _3)  }],
[32,1,(_1) => { __ = _1 }],
[32,3,(_1,_2,_3) => {  __ = LogicalExpression(_1, _2, _3)  }],
[33,1,(_1) => { __ = _1 }],
[33,3,(_1,_2,_3) => { 
            __ = BinaryExpression(_1, _2, _3)
         }],
[34,1,(_1) => { __ = _1 }],
[34,3,(_1,_2,_3) => { 
            __ = BinaryExpression(_1, _2, _3)
         }],
[35,3,(_1,_2,_3) => {  
            __ = BinaryExpression(_1, _2, _3)
         }],
[35,1,(_1) => { __ = _1 }],
[36,3,(_1,_2,_3) => {  
            __ = BinaryExpression(_1, _2, _3)
         }],
[36,1,(_1) => { __ = _1 }],
[37,1,(_1) => { __ = _1 }],
[37,1,(_1) => { __ = _1 }],
[37,2,(_1,_2) => {  
            __ = UnaryExpression(_1, _2)
         }],
[38,2,(_1,_2) => { 
            __ = CallExpression(_1, _2)
         }],
[38,2,(_1,_2) => { 
            __ = CallExpression(_1, _2)
         }],
[39,1,(_1) => { 
            __ = {
                type: 'Super'
            }
         }],
[40,1,(_1) => { __ = _1 }],
[40,1,(_1) => { __ = _1 }],
[41,3,(_1,_2,_3) => {  __ = _2  }],
[42,1,(_1) => { __ = _1 }],
[42,0,() => {  __ = []  }],
[43,1,(_1) => {  __ = [_1]  }],
[43,3,(_1,_2,_3) => { 
            _1.push(_3); __ = _1
         }],
[44,1,(_1) => { __ = _1 }],
[44,1,(_1) => { __ = _1 }],
[44,1,(_1) => { __ = _1 }],
[44,1,(_1) => { __ = _1 }],
[45,3,(_1,_2,_3) => { 
            __ = {
                type: 'NewExpression',
                callee: _2,
                arguments: _3
            }
         }],
[46,1,(_1) => { __ = _1 }],
[46,1,(_1) => { __ = _1 }],
[46,1,(_1) => { __ = _1 }],
[46,1,(_1) => { __ = _1 }],
[46,1,(_1) => { __ = _1 }],
[47,1,(_1) => {  __ = Literal('String', _1.slice(1,-1))  }],
[48,1,(_1) => {  __ = Literal('Boolean', true)  }],
[49,1,(_1) => {  __ = Literal('Boolean', false)  }],
[50,1,(_1) => {  __ = Literal('Null', null)  }],
[51,1,(_1) => {  __ = Literal('Numeric', Number(_1))  }],
[52,3,(_1,_2,_3) => {  __ = _2  }]];

/**
 * Encoded tokens map.
 */
const tokens = {"CLASS":"53","EXTENDS":"54","DO":"55","WHILE":"56","LET":"57","SIMPLE_ASSIGN":"58","IF":"59","ELSE":"60","DEF":"61","IDENTIFIER":"62","RETURN":"63","THIS":"64","COMPLEX_ASSIGN":"65","LOGICAL_OR":"66","LOGICAL_AND":"67","EQUALITY_OPERATOR":"68","RELATIONAL_OPERATOR":"69","ADDITIVE_OPERATOR":"70","MULTIPLICATIVE_OPERATOR":"71","SUPER":"72","NEW":"73","STRING":"74","TRUE":"75","FALSE":"76","NULL":"77","NUMBER":"78","'('":"79","')'":"80","';'":"81","','":"82","'{'":"83","'}'":"84","'.'":"85","'['":"86","']'":"87","$":"88"};

/**
 * Parsing table (generated by Syntax tool).
 */
const table = [{"0":1,"1":2,"2":3,"3":12,"6":11,"7":56,"8":55,"9":10,"14":9,"15":7,"16":41,"19":8,"21":6,"23":4,"24":5,"25":16,"26":40,"27":42,"29":13,"30":14,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"53":"s59","55":"s58","56":"s57","57":"s54","59":"s53","61":"s51","62":"s43","63":"s52","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45","81":"s49","83":"s50"},{"88":"acc"},{"2":60,"3":12,"6":11,"7":56,"8":55,"9":10,"14":9,"15":7,"16":41,"19":8,"21":6,"23":4,"24":5,"25":16,"26":40,"27":42,"29":13,"30":14,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"53":"s59","55":"s58","56":"s57","57":"s54","59":"s53","61":"s51","62":"s43","63":"s52","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45","81":"s49","83":"s50","88":"r1"},{"53":"r2","55":"r2","56":"r2","57":"r2","59":"r2","61":"r2","62":"r2","63":"r2","64":"r2","70":"r2","72":"r2","73":"r2","74":"r2","75":"r2","76":"r2","77":"r2","78":"r2","79":"r2","81":"r2","83":"r2","84":"r2","88":"r2"},{"53":"r4","55":"r4","56":"r4","57":"r4","59":"r4","60":"r4","61":"r4","62":"r4","63":"r4","64":"r4","70":"r4","72":"r4","73":"r4","74":"r4","75":"r4","76":"r4","77":"r4","78":"r4","79":"r4","81":"r4","83":"r4","84":"r4","88":"r4"},{"53":"r5","55":"r5","56":"r5","57":"r5","59":"r5","60":"r5","61":"r5","62":"r5","63":"r5","64":"r5","70":"r5","72":"r5","73":"r5","74":"r5","75":"r5","76":"r5","77":"r5","78":"r5","79":"r5","81":"r5","83":"r5","84":"r5","88":"r5"},{"53":"r6","55":"r6","56":"r6","57":"r6","59":"r6","60":"r6","61":"r6","62":"r6","63":"r6","64":"r6","70":"r6","72":"r6","73":"r6","74":"r6","75":"r6","76":"r6","77":"r6","78":"r6","79":"r6","81":"r6","83":"r6","84":"r6","88":"r6"},{"53":"r7","55":"r7","56":"r7","57":"r7","59":"r7","60":"r7","61":"r7","62":"r7","63":"r7","64":"r7","70":"r7","72":"r7","73":"r7","74":"r7","75":"r7","76":"r7","77":"r7","78":"r7","79":"r7","81":"r7","83":"r7","84":"r7","88":"r7"},{"53":"r8","55":"r8","56":"r8","57":"r8","59":"r8","60":"r8","61":"r8","62":"r8","63":"r8","64":"r8","70":"r8","72":"r8","73":"r8","74":"r8","75":"r8","76":"r8","77":"r8","78":"r8","79":"r8","81":"r8","83":"r8","84":"r8","88":"r8"},{"53":"r9","55":"r9","56":"r9","57":"r9","59":"r9","60":"r9","61":"r9","62":"r9","63":"r9","64":"r9","70":"r9","72":"r9","73":"r9","74":"r9","75":"r9","76":"r9","77":"r9","78":"r9","79":"r9","81":"r9","83":"r9","84":"r9","88":"r9"},{"53":"r10","55":"r10","56":"r10","57":"r10","59":"r10","60":"r10","61":"r10","62":"r10","63":"r10","64":"r10","70":"r10","72":"r10","73":"r10","74":"r10","75":"r10","76":"r10","77":"r10","78":"r10","79":"r10","81":"r10","83":"r10","84":"r10","88":"r10"},{"53":"r11","55":"r11","56":"r11","57":"r11","59":"r11","60":"r11","61":"r11","62":"r11","63":"r11","64":"r11","70":"r11","72":"r11","73":"r11","74":"r11","75":"r11","76":"r11","77":"r11","78":"r11","79":"r11","81":"r11","83":"r11","84":"r11","88":"r11"},{"53":"r12","55":"r12","56":"r12","57":"r12","59":"r12","60":"r12","61":"r12","62":"r12","63":"r12","64":"r12","70":"r12","72":"r12","73":"r12","74":"r12","75":"r12","76":"r12","77":"r12","78":"r12","79":"r12","81":"r12","83":"r12","84":"r12","88":"r12"},{"81":"s61"},{"80":"r52","81":"r52","87":"r52"},{"66":"s62","80":"r53","81":"r53","82":"r53","87":"r53"},{"28":84,"58":"s85","65":"s86","66":"r82","67":"r82","68":"r82","69":"r82","70":"r82","71":"r82","79":"r73","80":"r82","81":"r82","82":"r82","87":"r82"},{"66":"r55","67":"s65","80":"r55","81":"r55","82":"r55","87":"r55"},{"66":"r57","67":"r57","68":"s67","80":"r57","81":"r57","82":"r57","87":"r57"},{"66":"r59","67":"r59","68":"r59","69":"s69","80":"r59","81":"r59","82":"r59","87":"r59"},{"66":"r61","67":"r61","68":"r61","69":"r61","70":"s71","80":"r61","81":"r61","82":"r61","87":"r61"},{"66":"r64","67":"r64","68":"r64","69":"r64","70":"r64","71":"s73","80":"r64","81":"r64","82":"r64","87":"r64"},{"66":"r66","67":"r66","68":"r66","69":"r66","70":"r66","71":"r66","80":"r66","81":"r66","82":"r66","87":"r66"},{"66":"r67","67":"r67","68":"r67","69":"r67","70":"r67","71":"r67","80":"r67","81":"r67","82":"r67","87":"r67"},{"66":"r68","67":"r68","68":"r68","69":"r68","70":"r68","71":"r68","79":"r74","80":"r68","81":"r68","82":"r68","87":"r68"},{"16":41,"25":64,"26":40,"27":42,"37":75,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45"},{"66":"r80","67":"r80","68":"r80","69":"r80","70":"r80","71":"r80","80":"r80","81":"r80","82":"r80","87":"r80"},{"66":"r81","67":"r81","68":"r81","69":"r81","70":"r81","71":"r81","80":"r81","81":"r81","82":"r81","87":"r81"},{"66":"r83","67":"r83","68":"r83","69":"r83","70":"r83","71":"r83","80":"r83","81":"r83","82":"r83","87":"r83"},{"66":"r85","67":"r85","68":"r85","69":"r85","70":"r85","71":"r85","80":"r85","81":"r85","82":"r85","87":"r85"},{"66":"r86","67":"r86","68":"r86","69":"r86","70":"r86","71":"r86","80":"r86","81":"r86","82":"r86","87":"r86"},{"66":"r87","67":"r87","68":"r87","69":"r87","70":"r87","71":"r87","80":"r87","81":"r87","82":"r87","87":"r87"},{"66":"r88","67":"r88","68":"r88","69":"r88","70":"r88","71":"r88","80":"r88","81":"r88","82":"r88","87":"r88"},{"66":"r89","67":"r89","68":"r89","69":"r89","70":"r89","71":"r89","80":"r89","81":"r89","82":"r89","87":"r89"},{"66":"r94","67":"r94","68":"r94","69":"r94","70":"r94","71":"r94","80":"r94","81":"r94","82":"r94","87":"r94"},{"66":"r90","67":"r90","68":"r90","69":"r90","70":"r90","71":"r90","80":"r90","81":"r90","82":"r90","87":"r90"},{"66":"r91","67":"r91","68":"r91","69":"r91","70":"r91","71":"r91","80":"r91","81":"r91","82":"r91","87":"r91"},{"66":"r92","67":"r92","68":"r92","69":"r92","70":"r92","71":"r92","80":"r92","81":"r92","82":"r92","87":"r92"},{"66":"r93","67":"r93","68":"r93","69":"r93","70":"r93","71":"r93","80":"r93","81":"r93","82":"r93","87":"r93"},{"16":41,"26":76,"27":42,"62":"s43","64":"s44"},{"58":"r44","65":"r44","66":"r44","67":"r44","68":"r44","69":"r44","70":"r44","71":"r44","79":"r44","80":"r44","81":"r44","82":"r44","85":"s78","86":"s79","87":"r44"},{"58":"r45","65":"r45","66":"r45","67":"r45","68":"r45","69":"r45","70":"r45","71":"r45","79":"r45","80":"r45","81":"r45","82":"r45","85":"r45","86":"r45","87":"r45"},{"58":"r46","65":"r46","66":"r46","67":"r46","68":"r46","69":"r46","70":"r46","71":"r46","79":"r46","80":"r46","81":"r46","82":"r46","85":"r46","86":"r46","87":"r46"},{"53":"r31","54":"r31","55":"r31","56":"r31","57":"r31","58":"r31","59":"r31","61":"r31","62":"r31","63":"r31","64":"r31","65":"r31","66":"r31","67":"r31","68":"r31","69":"r31","70":"r31","71":"r31","72":"r31","73":"r31","74":"r31","75":"r31","76":"r31","77":"r31","78":"r31","79":"r31","80":"r31","81":"r31","82":"r31","83":"r31","85":"r31","86":"r31","87":"r31"},{"58":"r49","65":"r49","66":"r49","67":"r49","68":"r49","69":"r49","70":"r49","71":"r49","79":"r49","80":"r49","81":"r49","82":"r49","85":"r49","86":"r49","87":"r49"},{"16":41,"25":16,"26":40,"27":42,"29":88,"30":14,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45"},{"41":90,"79":"s80"},{"41":97,"79":"s80"},{"79":"r72"},{"53":"r43","55":"r43","56":"r43","57":"r43","59":"r43","60":"r43","61":"r43","62":"r43","63":"r43","64":"r43","70":"r43","72":"r43","73":"r43","74":"r43","75":"r43","76":"r43","77":"r43","78":"r43","79":"r43","81":"r43","83":"r43","84":"r43","88":"r43"},{"1":99,"2":3,"3":12,"6":11,"7":56,"8":55,"9":10,"14":9,"15":7,"16":41,"19":8,"21":6,"22":98,"23":4,"24":5,"25":16,"26":40,"27":42,"29":13,"30":14,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"53":"s59","55":"s58","56":"s57","57":"s54","59":"s53","61":"s51","62":"s43","63":"s52","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45","81":"s49","83":"s50","84":"r41"},{"16":101,"62":"s43"},{"16":41,"20":110,"25":16,"26":40,"27":42,"29":111,"30":14,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45","81":"r38"},{"79":"s113"},{"10":119,"11":120,"16":121,"62":"s43"},{"53":"r17","55":"r17","56":"r17","57":"r17","59":"r17","60":"r17","61":"r17","62":"r17","63":"r17","64":"r17","70":"r17","72":"r17","73":"r17","74":"r17","75":"r17","76":"r17","77":"r17","78":"r17","79":"r17","81":"r17","83":"r17","84":"r17","88":"r17"},{"53":"r18","55":"r18","56":"r18","57":"r18","59":"r18","60":"r18","61":"r18","62":"r18","63":"r18","64":"r18","70":"r18","72":"r18","73":"r18","74":"r18","75":"r18","76":"r18","77":"r18","78":"r18","79":"r18","81":"r18","83":"r18","84":"r18","88":"r18"},{"79":"s129"},{"2":133,"3":12,"6":11,"7":56,"8":55,"9":10,"14":9,"15":7,"16":41,"19":8,"21":6,"23":4,"24":5,"25":16,"26":40,"27":42,"29":13,"30":14,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"53":"s59","55":"s58","56":"s57","57":"s54","59":"s53","61":"s51","62":"s43","63":"s52","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45","81":"s49","83":"s50"},{"16":139,"62":"s43"},{"53":"r3","55":"r3","56":"r3","57":"r3","59":"r3","61":"r3","62":"r3","63":"r3","64":"r3","70":"r3","72":"r3","73":"r3","74":"r3","75":"r3","76":"r3","77":"r3","78":"r3","79":"r3","81":"r3","83":"r3","84":"r3","88":"r3"},{"53":"r42","55":"r42","56":"r42","57":"r42","59":"r42","60":"r42","61":"r42","62":"r42","63":"r42","64":"r42","70":"r42","72":"r42","73":"r42","74":"r42","75":"r42","76":"r42","77":"r42","78":"r42","79":"r42","81":"r42","83":"r42","84":"r42","88":"r42"},{"16":41,"25":64,"26":40,"27":42,"32":63,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45"},{"66":"r56","67":"s65","80":"r56","81":"r56","82":"r56","87":"r56"},{"66":"r82","67":"r82","68":"r82","69":"r82","70":"r82","71":"r82","79":"r73","80":"r82","81":"r82","82":"r82","87":"r82"},{"16":41,"25":64,"26":40,"27":42,"33":66,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45"},{"66":"r58","67":"r58","68":"s67","80":"r58","81":"r58","82":"r58","87":"r58"},{"16":41,"25":64,"26":40,"27":42,"34":68,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45"},{"66":"r60","67":"r60","68":"r60","69":"s69","80":"r60","81":"r60","82":"r60","87":"r60"},{"16":41,"25":64,"26":40,"27":42,"35":70,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45"},{"66":"r62","67":"r62","68":"r62","69":"r62","70":"s71","80":"r62","81":"r62","82":"r62","87":"r62"},{"16":41,"25":64,"26":40,"27":42,"36":72,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45"},{"66":"r63","67":"r63","68":"r63","69":"r63","70":"r63","71":"s73","80":"r63","81":"r63","82":"r63","87":"r63"},{"16":41,"25":64,"26":40,"27":42,"37":74,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45"},{"66":"r65","67":"r65","68":"r65","69":"r65","70":"r65","71":"r65","80":"r65","81":"r65","82":"r65","87":"r65"},{"66":"r69","67":"r69","68":"r69","69":"r69","70":"r69","71":"r69","80":"r69","81":"r69","82":"r69","87":"r69"},{"41":77,"79":"s80","85":"s78","86":"s79"},{"66":"r84","67":"r84","68":"r84","69":"r84","70":"r84","71":"r84","80":"r84","81":"r84","82":"r84","87":"r84"},{"16":81,"62":"s43"},{"16":41,"25":16,"26":40,"27":42,"29":82,"30":14,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45"},{"16":41,"25":16,"26":40,"27":42,"30":93,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"42":91,"43":92,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45","80":"r77"},{"58":"r47","65":"r47","66":"r47","67":"r47","68":"r47","69":"r47","70":"r47","71":"r47","79":"r47","80":"r47","81":"r47","82":"r47","85":"r47","86":"r47","87":"r47"},{"87":"s83"},{"58":"r48","65":"r48","66":"r48","67":"r48","68":"r48","69":"r48","70":"r48","71":"r48","79":"r48","80":"r48","81":"r48","82":"r48","85":"r48","86":"r48","87":"r48"},{"16":41,"25":16,"26":40,"27":42,"30":87,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45"},{"62":"r50","64":"r50","70":"r50","72":"r50","73":"r50","74":"r50","75":"r50","76":"r50","77":"r50","78":"r50","79":"r50"},{"62":"r51","64":"r51","70":"r51","72":"r51","73":"r51","74":"r51","75":"r51","76":"r51","77":"r51","78":"r51","79":"r51"},{"80":"r54","81":"r54","82":"r54","87":"r54"},{"80":"s89"},{"66":"r95","67":"r95","68":"r95","69":"r95","70":"r95","71":"r95","80":"r95","81":"r95","82":"r95","87":"r95"},{"66":"r70","67":"r70","68":"r70","69":"r70","70":"r70","71":"r70","79":"r70","80":"r70","81":"r70","82":"r70","87":"r70"},{"80":"s94"},{"80":"r76","82":"s95"},{"80":"r78","82":"r78"},{"66":"r75","67":"r75","68":"r75","69":"r75","70":"r75","71":"r75","79":"r75","80":"r75","81":"r75","82":"r75","87":"r75"},{"16":41,"25":16,"26":40,"27":42,"30":96,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45"},{"80":"r79","82":"r79"},{"66":"r71","67":"r71","68":"r71","69":"r71","70":"r71","71":"r71","79":"r71","80":"r71","81":"r71","82":"r71","87":"r71"},{"84":"s100"},{"2":60,"3":12,"6":11,"7":56,"8":55,"9":10,"14":9,"15":7,"16":41,"19":8,"21":6,"23":4,"24":5,"25":16,"26":40,"27":42,"29":13,"30":14,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"53":"s59","55":"s58","56":"s57","57":"s54","59":"s53","61":"s51","62":"s43","63":"s52","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45","81":"s49","83":"s50","84":"r40"},{"53":"r39","55":"r39","56":"r39","57":"r39","59":"r39","60":"r39","61":"r39","62":"r39","63":"r39","64":"r39","70":"r39","72":"r39","73":"r39","74":"r39","75":"r39","76":"r39","77":"r39","78":"r39","79":"r39","81":"r39","83":"r39","84":"r39","88":"r39"},{"79":"s102"},{"16":105,"17":103,"18":104,"62":"s43","80":"r33"},{"80":"s106"},{"80":"r32","82":"s108"},{"80":"r34","82":"r34"},{"21":107,"83":"s50"},{"53":"r30","55":"r30","56":"r30","57":"r30","59":"r30","60":"r30","61":"r30","62":"r30","63":"r30","64":"r30","70":"r30","72":"r30","73":"r30","74":"r30","75":"r30","76":"r30","77":"r30","78":"r30","79":"r30","81":"r30","83":"r30","84":"r30","88":"r30"},{"16":109,"62":"s43"},{"80":"r35","82":"r35"},{"81":"s112"},{"81":"r37"},{"53":"r36","55":"r36","56":"r36","57":"r36","59":"r36","60":"r36","61":"r36","62":"r36","63":"r36","64":"r36","70":"r36","72":"r36","73":"r36","74":"r36","75":"r36","76":"r36","77":"r36","78":"r36","79":"r36","81":"r36","83":"r36","84":"r36","88":"r36"},{"16":41,"25":16,"26":40,"27":42,"29":114,"30":14,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45"},{"80":"s115"},{"2":116,"3":12,"6":11,"7":56,"8":55,"9":10,"14":9,"15":7,"16":41,"19":8,"21":6,"23":4,"24":5,"25":16,"26":40,"27":42,"29":13,"30":14,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"53":"s59","55":"s58","56":"s57","57":"s54","59":"s53","61":"s51","62":"s43","63":"s52","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45","81":"s49","83":"s50"},{"53":"r28","55":"r28","56":"r28","57":"r28","59":"r28","60":"s117","61":"r28","62":"r28","63":"r28","64":"r28","70":"r28","72":"r28","73":"r28","74":"r28","75":"r28","76":"r28","77":"r28","78":"r28","79":"r28","81":"r28","83":"r28","84":"r28","88":"r28"},{"2":118,"3":12,"6":11,"7":56,"8":55,"9":10,"14":9,"15":7,"16":41,"19":8,"21":6,"23":4,"24":5,"25":16,"26":40,"27":42,"29":13,"30":14,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"53":"s59","55":"s58","56":"s57","57":"s54","59":"s53","61":"s51","62":"s43","63":"s52","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45","81":"s49","83":"s50"},{"53":"r29","55":"r29","56":"r29","57":"r29","59":"r29","60":"r29","61":"r29","62":"r29","63":"r29","64":"r29","70":"r29","72":"r29","73":"r29","74":"r29","75":"r29","76":"r29","77":"r29","78":"r29","79":"r29","81":"r29","83":"r29","84":"r29","88":"r29"},{"81":"s122","82":"s123"},{"81":"r22","82":"r22"},{"12":125,"13":126,"58":"s127","81":"r26","82":"r26"},{"53":"r21","55":"r21","56":"r21","57":"r21","59":"r21","60":"r21","61":"r21","62":"r21","63":"r21","64":"r21","70":"r21","72":"r21","73":"r21","74":"r21","75":"r21","76":"r21","77":"r21","78":"r21","79":"r21","81":"r21","83":"r21","84":"r21","88":"r21"},{"11":124,"16":121,"62":"s43"},{"81":"r23","82":"r23"},{"81":"r24","82":"r24"},{"81":"r25","82":"r25"},{"16":41,"25":16,"26":40,"27":42,"30":128,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45"},{"81":"r27","82":"r27"},{"16":41,"25":16,"26":40,"27":42,"29":130,"30":14,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45"},{"80":"s131"},{"2":132,"3":12,"6":11,"7":56,"8":55,"9":10,"14":9,"15":7,"16":41,"19":8,"21":6,"23":4,"24":5,"25":16,"26":40,"27":42,"29":13,"30":14,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"53":"s59","55":"s58","56":"s57","57":"s54","59":"s53","61":"s51","62":"s43","63":"s52","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45","81":"s49","83":"s50"},{"53":"r20","55":"r20","56":"r20","57":"r20","59":"r20","60":"r20","61":"r20","62":"r20","63":"r20","64":"r20","70":"r20","72":"r20","73":"r20","74":"r20","75":"r20","76":"r20","77":"r20","78":"r20","79":"r20","81":"r20","83":"r20","84":"r20","88":"r20"},{"56":"s134"},{"79":"s135"},{"16":41,"25":16,"26":40,"27":42,"29":136,"30":14,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"62":"s43","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45"},{"80":"s137"},{"81":"s138"},{"53":"r19","55":"r19","56":"r19","57":"r19","59":"r19","60":"r19","61":"r19","62":"r19","63":"r19","64":"r19","70":"r19","72":"r19","73":"r19","74":"r19","75":"r19","76":"r19","77":"r19","78":"r19","79":"r19","81":"r19","83":"r19","84":"r19","88":"r19"},{"4":140,"5":141,"53":"r15","54":"s142","55":"r15","56":"r15","57":"r15","59":"r15","61":"r15","62":"r15","63":"r15","64":"r15","70":"r15","72":"r15","73":"r15","74":"r15","75":"r15","76":"r15","77":"r15","78":"r15","79":"r15","81":"r15","83":"r15"},{"2":143,"3":12,"6":11,"7":56,"8":55,"9":10,"14":9,"15":7,"16":41,"19":8,"21":6,"23":4,"24":5,"25":16,"26":40,"27":42,"29":13,"30":14,"31":15,"32":17,"33":18,"34":19,"35":20,"36":21,"37":22,"38":24,"39":47,"40":46,"44":23,"45":27,"46":26,"47":30,"48":31,"49":32,"50":33,"51":29,"52":28,"53":"s59","55":"s58","56":"s57","57":"s54","59":"s53","61":"s51","62":"s43","63":"s52","64":"s44","70":"s25","72":"s48","73":"s39","74":"s35","75":"s36","76":"s37","77":"s38","78":"s34","79":"s45","81":"s49","83":"s50"},{"53":"r14","55":"r14","56":"r14","57":"r14","59":"r14","61":"r14","62":"r14","63":"r14","64":"r14","70":"r14","72":"r14","73":"r14","74":"r14","75":"r14","76":"r14","77":"r14","78":"r14","79":"r14","81":"r14","83":"r14"},{"16":144,"62":"s43"},{"53":"r13","55":"r13","56":"r13","57":"r13","59":"r13","60":"r13","61":"r13","62":"r13","63":"r13","64":"r13","70":"r13","72":"r13","73":"r13","74":"r13","75":"r13","76":"r13","77":"r13","78":"r13","79":"r13","81":"r13","83":"r13","84":"r13","88":"r13"},{"53":"r16","55":"r16","56":"r16","57":"r16","59":"r16","61":"r16","62":"r16","63":"r16","64":"r16","70":"r16","72":"r16","73":"r16","74":"r16","75":"r16","76":"r16","77":"r16","78":"r16","79":"r16","81":"r16","83":"r16"}];

/**
 * Parsing stack.
 */
const stack = [];

/**
 * Tokenizer instance.
 */
let tokenizer;
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 * See `--custom-tokinzer` to skip this generation, and use a custom one.
 */

const lexRules = [[/^\(/, function() { return "'('"; }],
[/^\)/, function() { return "')'"; }],
[/^;/, function() { return "';'"; }],
[/^,/, function() { return "','"; }],
[/^\{/, function() { return "'{'"; }],
[/^\}/, function() { return "'}'"; }],
[/^\./, function() { return "'.'"; }],
[/^\[/, function() { return "'['"; }],
[/^\]/, function() { return "']'"; }],
[/^\/\/.*/, function() { /* skip comment */ }],
[/^\/\*(.|\s)*\*\//, function() { /* skip comment */ }],
[/^\s+/, function() { /* skip white space */ }],
[/^"[^\"]*"/, function() { return 'STRING' }],
[/^\bdef\b/, function() { return 'DEF' }],
[/^\breturn\b/, function() { return 'RETURN' }],
[/^\bif\b/, function() { return 'IF' }],
[/^\belse\b/, function() { return 'ELSE' }],
[/^\blet\b/, function() { return 'LET' }],
[/^\bwhile\b/, function() { return 'WHILE' }],
[/^\bdo\b/, function() { return 'DO' }],
[/^\bfor\b/, function() { return 'FOR' }],
[/^\bclass\b/, function() { return 'CLASS' }],
[/^\bextends\b/, function() { return 'EXTENDS' }],
[/^\bsuper\b/, function() { return 'SUPER' }],
[/^\bnew\b/, function() { return 'NEW' }],
[/^\bthis\b/, function() { return 'THIS' }],
[/^\btrue\b/, function() { return 'TRUE' }],
[/^\bfalse\b/, function() { return 'FALSE' }],
[/^\bnull\b/, function() { return 'NULL' }],
[/^\d+/, function() { return 'NUMBER' }],
[/^\w+/, function() { return 'IDENTIFIER' }],
[/^\|\|/, function() { return 'LOGICAL_OR' }],
[/^&&/, function() { return 'LOGICAL_AND' }],
[/^[\=!]=/, function() { return 'EQUALITY_OPERATOR' }],
[/^[><]=?/, function() { return 'RELATIONAL_OPERATOR' }],
[/^=/, function() { return 'SIMPLE_ASSIGN' }],
[/^[*/\+\-]=/, function() { return  'COMPLEX_ASSIGN' }],
[/^[+\-]/, function() { return 'ADDITIVE_OPERATOR' }],
[/^[*/]/, function() { return 'MULTIPLICATIVE_OPERATOR' }]];
const lexRulesByConditions = {"INITIAL":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]};

const EOF_TOKEN = {
  type: EOF,
  value: '',
};

tokenizer = {
  initString(string) {
    this._string = string;
    this._cursor = 0;

    this._states = ['INITIAL'];
    this._tokensQueue = [];

    this._currentLine = 1;
    this._currentColumn = 0;
    this._currentLineBeginOffset = 0;

    /**
     * Matched token location data.
     */
    this._tokenStartOffset = 0;
    this._tokenEndOffset = 0;
    this._tokenStartLine = 1;
    this._tokenEndLine = 1;
    this._tokenStartColumn = 0;
    this._tokenEndColumn = 0;

    return this;
  },

  /**
   * Returns tokenizer states.
   */
  getStates() {
    return this._states;
  },

  getCurrentState() {
    return this._states[this._states.length - 1];
  },

  pushState(state) {
    this._states.push(state);
  },

  begin(state) {
    this.pushState(state);
  },

  popState() {
    if (this._states.length > 1) {
      return this._states.pop();
    }
    return this._states[0];
  },

  getNextToken() {
    // Something was queued, return it.
    if (this._tokensQueue.length > 0) {
      return this.onToken(this._toToken(this._tokensQueue.shift()));
    }

    if (!this.hasMoreTokens()) {
      return this.onToken(EOF_TOKEN);
    }

    let string = this._string.slice(this._cursor);
    let lexRulesForState = lexRulesByConditions[this.getCurrentState()];

    for (let i = 0; i < lexRulesForState.length; i++) {
      let lexRuleIndex = lexRulesForState[i];
      let lexRule = lexRules[lexRuleIndex];

      let matched = this._match(string, lexRule[0]);

      // Manual handling of EOF token (the end of string). Return it
      // as `EOF` symbol.
      if (string === '' && matched === '') {
        this._cursor++;
      }

      if (matched !== null) {
        yytext = matched;
        yyleng = yytext.length;
        let token = lexRule[1].call(this);

        if (!token) {
          return this.getNextToken();
        }

        // If multiple tokens are returned, save them to return
        // on next `getNextToken` call.

        if (Array.isArray(token)) {
          const tokensToQueue = token.slice(1);
          token = token[0];
          if (tokensToQueue.length > 0) {
            this._tokensQueue.unshift(...tokensToQueue);
          }
        }

        return this.onToken(this._toToken(token, yytext));
      }
    }

    if (this.isEOF()) {
      this._cursor++;
      return EOF_TOKEN;
    }

    this.throwUnexpectedToken(
      string[0],
      this._currentLine,
      this._currentColumn
    );
  },

  /**
   * Throws default "Unexpected token" exception, showing the actual
   * line from the source, pointing with the ^ marker to the bad token.
   * In addition, shows `line:column` location.
   */
  throwUnexpectedToken(symbol, line, column) {
    const lineSource = this._string.split('\n')[line - 1];
    let lineData = '';

    if (lineSource) {
      const pad = ' '.repeat(column);
      lineData = '\n\n' + lineSource + '\n' + pad + '^\n';
    }

    throw new SyntaxError(
      `${lineData}Unexpected token: "${symbol}" ` +
      `at ${line}:${column}.`
    );
  },

  getCursor() {
    return this._cursor;
  },

  getCurrentLine() {
    return this._currentLine;
  },

  getCurrentColumn() {
    return this._currentColumn;
  },

  _captureLocation(matched) {
    const nlRe = /\n/g;

    // Absolute offsets.
    this._tokenStartOffset = this._cursor;

    // Line-based locations, start.
    this._tokenStartLine = this._currentLine;
    this._tokenStartColumn =
      this._tokenStartOffset - this._currentLineBeginOffset;

    // Extract `\n` in the matched token.
    let nlMatch;
    while ((nlMatch = nlRe.exec(matched)) !== null) {
      this._currentLine++;
      this._currentLineBeginOffset = this._tokenStartOffset + nlMatch.index + 1;
    }

    this._tokenEndOffset = this._cursor + matched.length;

    // Line-based locations, end.
    this._tokenEndLine = this._currentLine;
    this._tokenEndColumn = this._currentColumn =
      (this._tokenEndOffset - this._currentLineBeginOffset);
  },

  _toToken(tokenType, yytext = '') {
    return {
      // Basic data.
      type: tokenType,
      value: yytext,

      // Location data.
      startOffset: this._tokenStartOffset,
      endOffset: this._tokenEndOffset,
      startLine: this._tokenStartLine,
      endLine: this._tokenEndLine,
      startColumn: this._tokenStartColumn,
      endColumn: this._tokenEndColumn,
    };
  },

  isEOF() {
    return this._cursor === this._string.length;
  },

  hasMoreTokens() {
    return this._cursor <= this._string.length;
  },

  _match(string, regexp) {
    let matched = string.match(regexp);
    if (matched) {
      // Handle `\n` in the matched token to track line numbers.
      this._captureLocation(matched[0]);
      this._cursor += matched[0].length;
      return matched[0];
    }
    return null;
  },

  /**
   * Allows analyzing, and transforming token. Default implementation
   * just passes the token through.
   */
  onToken(token) {
    return token;
  },
};

/**
 * Expose tokenizer so it can be accessed in semantic actions.
 */
yy.lexer = tokenizer;
yy.tokenizer = tokenizer;

/**
 * Global parsing options. Some options can be shadowed per
 * each `parse` call, if the optations are passed.
 *
 * Initalized to the `captureLocations` which is passed
 * from the generator. Other options can be added at runtime.
 */
yy.options = {
  captureLocations: false,
};

/**
 * Parsing module.
 */
const yyparse = {
  /**
   * Sets global parsing options.
   */
  setOptions(options) {
    yy.options = options;
    return this;
  },

  /**
   * Returns parsing options.
   */
  getOptions() {
    return yy.options;
  },

  /**
   * Parses a string.
   */
  parse(string, parseOptions) {
    if (!tokenizer) {
      throw new Error(`Tokenizer instance wasn't specified.`);
    }

    tokenizer.initString(string);

    /**
     * If parse options are passed, override global parse options for
     * this call, and later restore global options.
     */
    let globalOptions = yy.options;
    if (parseOptions) {
      yy.options = Object.assign({}, yy.options, parseOptions);
    }

    /**
     * Allow callers to do setup work based on the
     * parsing string, and passed options.
     */
    yyparse.onParseBegin(string, tokenizer, yy.options);

    stack.length = 0;
    stack.push(0);

    let token = tokenizer.getNextToken();
    let shiftedToken = null;

    do {
      if (!token) {
        // Restore options.
        yy.options = globalOptions;
        unexpectedEndOfInput();
      }

      let state = stack[stack.length - 1];
      let column = tokens[token.type];

      if (!table[state].hasOwnProperty(column)) {
        yy.options = globalOptions;
        unexpectedToken(token);
      }

      let entry = table[state][column];

      // Shift action.
      if (entry[0] === 's') {
        let loc = null;

        if (yy.options.captureLocations) {
          loc = {
            startOffset: token.startOffset,
            endOffset: token.endOffset,
            startLine: token.startLine,
            endLine: token.endLine,
            startColumn: token.startColumn,
            endColumn: token.endColumn,
          };
        }

        shiftedToken = this.onShift(token);

        stack.push(
          {symbol: tokens[shiftedToken.type], semanticValue: shiftedToken.value, loc},
          Number(entry.slice(1))
        );

        token = tokenizer.getNextToken();
      }

      // Reduce action.
      else if (entry[0] === 'r') {
        let productionNumber = entry.slice(1);
        let production = productions[productionNumber];
        let hasSemanticAction = typeof production[2] === 'function';
        let semanticValueArgs = hasSemanticAction ? [] : null;

        const locationArgs = (
          hasSemanticAction && yy.options.captureLocations
            ? []
            : null
        );

        if (production[1] !== 0) {
          let rhsLength = production[1];
          while (rhsLength-- > 0) {
            stack.pop();
            let stackEntry = stack.pop();

            if (hasSemanticAction) {
              semanticValueArgs.unshift(stackEntry.semanticValue);

              if (locationArgs) {
                locationArgs.unshift(stackEntry.loc);
              }
            }
          }
        }

        const reduceStackEntry = {symbol: production[0]};

        if (hasSemanticAction) {
          yytext = shiftedToken ? shiftedToken.value : null;
          yyleng = shiftedToken ? shiftedToken.value.length : null;

          const semanticActionArgs = (
            locationArgs !== null
              ? semanticValueArgs.concat(locationArgs)
              : semanticValueArgs
          );

          production[2](...semanticActionArgs);

          reduceStackEntry.semanticValue = __;

          if (locationArgs) {
            reduceStackEntry.loc = __loc;
          }
        }

        const nextState = stack[stack.length - 1];
        const symbolToReduceWith = production[0];

        stack.push(
          reduceStackEntry,
          table[nextState][symbolToReduceWith]
        );
      }

      // Accept.
      else if (entry === 'acc') {
        stack.pop();
        let parsed = stack.pop();

        if (stack.length !== 1 ||
            stack[0] !== 0 ||
            tokenizer.hasMoreTokens()) {
          // Restore options.
          yy.options = globalOptions;
          unexpectedToken(token);
        }

        if (parsed.hasOwnProperty('semanticValue')) {
          yy.options = globalOptions;
          yyparse.onParseEnd(parsed.semanticValue);
          return parsed.semanticValue;
        }

        yyparse.onParseEnd();

        // Restore options.
        yy.options = globalOptions;
        return true;
      }

    } while (tokenizer.hasMoreTokens() || stack.length > 1);
  },

  setTokenizer(customTokenizer) {
    tokenizer = customTokenizer;
    return yyparse;
  },

  getTokenizer() {
    return tokenizer;
  },

  onParseBegin(string, tokenizer, options) {},
  onParseEnd(parsed) {},

  /**
   * Allows analyzing, and transforming shifted token. Default implementation
   * just passes the token through.
   */
  onShift(token) {
    return token;
  },
};

// code included "as is"

function BinaryExpression(left, operator, right){ 
    return {
        type: 'BinaryExpression',
        operator,
        left,
        right
    };
}


function Literal(namePrefix, value) {
    return {
        type: `${namePrefix}Literal`,
        value
    }
}

function IfStatement(test, consequent,alternate) {
    return {
        type: 'IfState',
        test,
        consequent,
        alternate
    }
}

function LogicalExpression(left, operator, right){ 
    return {
        type: 'LogicalExpression',
        operator,
        left,
        right
    };
}

function UnaryExpression(operator, argument) {
    return {
        type: 'UnaryExpression',
        operator,
        argument
    }
}

function MemberExpression(object, property) {
    return {
        type: 'MemberExpression',
        object,
        property
    }
}

function CallExpression(callee, args) {
  return {
    type: 'CallExpression',
    callee,
    arguments: args,
  }
}

function unexpectedToken(token) {
  if (token.type === EOF) {
    unexpectedEndOfInput();
  }

  tokenizer.throwUnexpectedToken(
    token.value,
    token.startLine,
    token.startColumn
  );
}

function unexpectedEndOfInput() {
  parseError(`Unexpected end of input.`);
}

function parseError(message) {
  throw new SyntaxError(message);
}

module.exports = yyparse;
